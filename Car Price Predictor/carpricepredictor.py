# -*- coding: utf-8 -*-
"""CarPricePredictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19v9e83NypnrqL-oN3M8OHpVZ_JAaCYlk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder,OrdinalEncoder,StandardScaler
import pickle

def scaling(X_train,X_test):
  # Scaling
  scaler = StandardScaler()
  X_train_scaled = scaler.fit_transform(X_train)
  X_test_scaled = scaler.transform(X_test)
  return X_train_scaled,X_test_scaled,scaler

def encoder(X_train,X_test):
  '''
  Encoding Categorical data:
  Fuel_Type, Transmission = OHE
  Owner_Type = Ordinal Encoder
  '''
  transformer = ColumnTransformer(transformers=[
    ('tnf1',OneHotEncoder(sparse_output=False,dtype=np.int32,drop='first'),['Location','Fuel_Type','Transmission']),
    ('tnf2',OrdinalEncoder(categories=[['First','Second','Third','Fourth & Above']]),['Owner_Type'])
  ],remainder='passthrough')

  # Encoding
  X_train_new = transformer.fit_transform(X_train)
  X_test_new = transformer.transform(X_test)

  return X_train_new,X_test_new,transformer

def preprocessing(data):
  data = data.drop(['S.No.','Name'],axis=1)

  # Filtering columns by removing units
  data['Engine_Filtered'] = data['Engine'].str.extract(r'(\d+)')
  data['Power_Filtered'] = data['Power'].str.extract(r'(\d*\.?\d*)')
  data['Mileage'] = data['Mileage'].str.replace(r'\s*(km/kg|kmpl)','',regex=True)
  data['New_Price'] = data['New_Price'].str.replace(r'\s*(Lakh)','',regex=True)

  # typecasting each column
  data['Engine_Filtered'] = pd.to_numeric(data['Engine_Filtered'], errors='coerce')
  data['Power_Filtered'] = pd.to_numeric(data['Power_Filtered'], errors='coerce')
  data['Mileage'] = pd.to_numeric(data['Mileage'],errors='coerce')
  data['New_Price'] = pd.to_numeric(data['New_Price'],errors='coerce')

  # handling null values
  data = data.dropna(subset=['New_Price','Price'],how='all')
  data['Mileage'] = data['Mileage'].fillna(data['Mileage'].mean())
  data['Seats'] = data['Seats'].fillna(data['Seats'].mean())
  data['Engine_Filtered'] = data['Engine_Filtered'].fillna(data['Engine_Filtered'].mean())
  data['Power_Filtered'] = data['Power_Filtered'].fillna(data['Power_Filtered'].mean())

  # merging Price and New_Price columns
  conditions = [
    ((data['New_Price'].notna())),
    ((data['New_Price'].isna()) & (data['Price'].notna()))
  ]
  choices = [
      data['New_Price'],
      data['Price']
  ]
  data['Final_Price'] = np.select(conditions,choices,default=np.nan)

  # removing extra columns
  data = data.drop(['Engine','Power'],axis=1)
  data = data.drop(['New_Price','Price'],axis=1)

  # Train Test Split
  X = data.drop('Final_Price',axis=1)
  y = data['Final_Price']
  X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=2)

  X_train,X_test,transformer = encoder(X_train,X_test)
  X_train,X_test,scaler = scaling(X_train,X_test)
  return X_train,X_test,y_train,y_test,transformer,scaler

def new_predict(new_data,transformer,scaler,linear_regressor):
  new_df = pd.DataFrame([new_data])
  transformed_data = transformer.transform(new_df)
  scaled_data = scaler.transform(transformed_data)
  return linear_regressor.predict(scaled_data)[0]

def validate_input(input_data):
  fuel = ['CNG','Petrol','Diesel','LPG','Electric']
  owner = ['First','Second','Third','Fourth & Above']
  transmission = ['Manual','Automatic']
  location = ['Mumbai', 'Pune', 'Chennai', 'Coimbatore', 'Hyderabad', 'Jaipur', 'Kochi',
 'Kolkata', 'Delhi', 'Bangalore', 'Ahmedabad']
  if input_data['Fuel_Type'] not in fuel:
    raise ValueError('Invalid fuel type')
  elif input_data['Owner_Type'] not in owner:
    raise ValueError('Invalid owner type')
  elif input_data['Location'] not in location:
    raise ValueError('Invalid location')
  elif input_data['Transmission'] not in transmission:
    raise ValueError('Invalid transmission')
  elif input_data['Kilometers_Driven'] < 0:
    raise ValueError('Invalid kilometers driven')
  elif input_data['Year'] < 1800 or input_data['Year']>2025:
    raise ValueError('Invalid year')
  return True

data = pd.read_csv(r'D:\CODING_CODES\AIML\Projects\Car Price Predictor\used_cars_data.csv')

X_train,X_test,y_train,y_test,transformer,scaler = preprocessing(data)

linear_regressor = LinearRegression()

linear_regressor.fit(X_train,y_train)

r2 = r2_score(y_test,linear_regressor.predict(X_test))

print("Welcome to your car price predictor! Please provide the following details to get the estimated price of your car.")
try:
    toPredict = {
      'Year' : int(input("Enter year: ")),
      'Location' : input("Enter location: "),
      'Kilometers_Driven' : float(input("Enter kilometers driven: ")),
      'Fuel_Type' : input("Enter fuel type (CNG/Diesel/Petrol/LPG/Electric): "),
      'Transmission' : input("Enter transmission (Manual/Automatic): "),
      'Owner_Type' : input("Enter owner type (First/Second/Third/Fourth & Above): "),
      'Mileage' : float(input("Enter mileage: ")),
      'Seats' : int(input("Enter seats: ")),
      'Engine_Filtered' : float(input("Enter engine: ")),
      'Power_Filtered' : float(input("Enter power: "))
    }
    validate_input(toPredict)
    print(f"Estimated price is: {new_predict(toPredict,transformer,scaler,linear_regressor)} lakhs")
except ValueError as e:
  print(f"{e}. Try again!")

with open(r'D:\CODING_CODES\AIML\Projects\Car Price Predictor\car_price_predictor_pickle','wb') as file:
  pickle.dump(linear_regressor,file)


