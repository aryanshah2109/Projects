# -*- coding: utf-8 -*-
"""HeartDiseaseDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCNLFs-rrB-whiKQdOUG2le__B8j2wxZ
"""

# Dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder
from sklearn.compose import ColumnTransformer

def transform(X_train,X_test):
  '''
  categories:
  sex, chestpaintype, restingecg,exerciseangina = one hot encoder
  st_slope = ordinal encoder
  '''
  transformer = ColumnTransformer(transformers=[
      ('tnf1',OneHotEncoder(sparse_output=False,drop='first',dtype=np.int32),['Sex','ChestPainType','RestingECG','ExerciseAngina']),
      ('tnf2',OrdinalEncoder(categories=[['Up','Flat','Down']]),['ST_Slope'])
  ],remainder='passthrough')
  X_train_new = transformer.fit_transform(X_train)
  X_test_new = transformer.transform(X_test)
  return X_train_new, X_test_new, transformer

def scale(X_train,X_test):
  scaler = StandardScaler()
  X_train_scaled = scaler.fit_transform(X_train)
  X_test_scaled = scaler.transform(X_test)
  return X_train_scaled, X_test_scaled, scaler

def handling_outliers(data,columns):
  for col in columns:
    percentile_25 = data[col].quantile(0.25)
    percentile_75 = data[col].quantile(0.75)
    iqr = percentile_75 - percentile_25
    max_range = percentile_75 + 1.5*iqr
    min_range = percentile_25 - 1.5*iqr

    data[col] = np.where(
        data[col]>max_range,
        max_range,
        np.where(
           data[col] < min_range,
           min_range,
           data[col]
        )
    )
  return data

def preprocessing(data):
  # handling outliers
  # outliers = RestingBP,Cholesterol,MaxHR,Oldpeak
  # RestingBP: 28 Cholesterol: 183 Oldpeak: 16

  data = handling_outliers(data,['RestingBP','Cholesterol','Oldpeak'])

  data['Oldpeak'] = data['Oldpeak'].apply(lambda x: 0 if x<0 else x)

  X = data.drop('HeartDisease',axis=1)
  y = data['HeartDisease']
  X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=4)

  # encoding
  '''
  categories:
  sex, chestpaintype, restingecg,exerciseangina = one hot encoder
  st_slope = ordinal encoder
  '''
  X_train, X_test, transformer = transform(X_train,X_test)

  # scaling
  X_train, X_test, scaler = scale(X_train,X_test)

  # cross validation of hyperparameters
  parameters = {'penalty':['l1','l2'],'C':[1,2,3,4,5,10,20,30,40,50],'max_iter':[100,200,300]}
  grid = GridSearchCV(LogisticRegression(solver='saga'),param_grid = parameters,scoring='accuracy',cv=5)

  return X_train,X_test,y_train,y_test,transformer,scaler,grid

def validate_input(input_data):
  sexParams = ['M','F']
  chestPainParams = ['ATA','NAP','ASY','TA']
  restingECGParams = ['Normal','ST','LVH']
  exerciseAnginaParams = ['Y','N']
  stSlopeParams = ['Up','Flat','Down']

  if(input_data['Age'] <= 0 or input_data['Age'] > 150):
    raise ValueError('Invalid age')
  elif(input_data['Sex'] not in sexParams):
    raise ValueError('Invalid sex')
  elif(input_data['ChestPainType'] not in chestPainParams):
    raise ValueError('Invalid chest pain type')
  elif(input_data['RestingBP'] <= 0 or input_data['RestingBP'] > 200):
    raise ValueError('Invalid blood pressure')
  elif(input_data['Cholesterol'] <= 0 or input_data['Cholesterol'] >= 500):
    raise ValueError('Invalid cholesterol')
  elif(input_data['FastingBS'] < 0 or input_data['FastingBS'] > 1):
    raise ValueError('Invalid blood sugar input')
  elif(input_data['RestingECG'] not in restingECGParams):
    raise ValueError('Invalid resting ECG type')
  elif(input_data['MaxHR'] <= 0 or input_data['MaxHR'] > 300):
    raise ValueError('Invalid maximum heart rate')
  elif(input_data['ExerciseAngina'] not in exerciseAnginaParams):
    raise ValueError('Invalid exercise chest pain input')
  elif(input_data['Oldpeak'] < 0 or input_data['Oldpeak'] > 5):
    raise ValueError('Invalid old peak')
  elif(input_data['ST_Slope'] not in stSlopeParams):
    raise ValueError('Invalid st slope input')
  return True

def toPredict(new_data,model,transformer, scaler):
  new_data_df = pd.DataFrame([new_data])
  transformed_data = transformer.transform(new_data_df)
  scaled_data = scaler.transform(transformed_data)
  return model.predict(scaled_data)

data = pd.read_csv(r'D:\CODING_CODES\AIML\Projects\Heart Disease Predictor\heart.csv')

X_train,X_test,y_train,y_test,transformer,scaler,grid = preprocessing(data)

grid.fit(X_train,y_train)

y_pred = grid.predict(X_test)

print("Enter data to predict from whether you have a heart disease or not:")
try:
    input_data = {
      'Age': int(input("Enter age: ")),
      'Sex': input("Enter sex (M/F): "),
      'ChestPainType': input("Enter chest pain type (ATA/NAP/ASY/TA):"),
      'RestingBP' : float(input("Enter resting blood pressure: ")),
      'Cholesterol': float(input("Enter cholesterol level: ")),
      'FastingBS' : int(input("Enter fasting blood sugar level (0/1) (0 for bs <= 120 mg/dl) (1 for bs > 120 mg/dl): ")),
      'RestingECG' : input("Enter resting ECG type (Normal/ST/LVH):"),
      'MaxHR' : int(input("Enter maximum heart rate: ")),
      'ExerciseAngina' : input("Do you feel heart pain while exercising? (Y/N): "),
      'Oldpeak' : float(input("Enter old peak: ")),
      'ST_Slope' : input("Enter ST slope (Up/Flat/Down): ")
    }
    validate_input(input_data)
except ValueError as e:
  print(e)
except Exception as e:
  print(f"Something unexpected happened! {e}")

prediction = toPredict(input_data,grid,transformer,scaler)
if(prediction==1):
  print("You might have a heart disease!")
else:
  print("You might not have a heart disease")

